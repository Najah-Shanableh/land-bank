from django.contrib.gis.db import models

class Assessor(models.Model):                                         
  pin                           = models.CharField('Property ID number', max_length=14, db_index=True)
  houseno                       = models.CharField('Address number', max_length=100, null=True)
  direction                     = models.CharField('Street direction', max_length=2, null=True)
  street                        = models.CharField('Street name', max_length=100, null=True)
  year_built                    = models.IntegerField('Year the property was built', null=True)
  attic_desc                    = models.CharField('Attic description', max_length=250, null=True)
  basement_desc                 = models.CharField('Basement description', max_length=250, null=True)
  class_desc                    = models.CharField('Building class description', max_length=250, null=True)
  current_building_assmt        = models.FloatField('Current assessment of building', null=True)
  current_land_assmt            = models.FloatField('Current assessment of land', null=True)
  current_total_assmt           = models.FloatField('Current total assessment', null=True)
  ext_desc                      = models.CharField('Extended description', max_length=100, null=True)
  garage_desc                   = models.CharField('Garage description', max_length=100, null=True)
  sqft_bldg                     = models.FloatField('Building square footage', null=True)
  sqft_land                     = models.FloatField('Land square footage', null=True)
  ptype_desc                    = models.CharField('Property type', max_length=100, null=True)
  type_pt_sf                    = models.IntegerField('Single-family', null=True)
  type_pt_condo                 = models.IntegerField('Condo', null=True)
  type_pt_2_4                   = models.IntegerField('2-4 unit building', null=True)
  type_pt_5                     = models.IntegerField('5+ unit building', null=True)
  type_pt_nonres                = models.IntegerField('Non-residental building', null=True)
  type_pt_unknown               = models.IntegerField('Building of unknown type', null=True)
  ptype                         = models.ForeignKey('PropertyTypes')
  estim_hunit                   = models.IntegerField('Estimated number of housing units based on sqft', null=True)
  lat_y                         = models.FloatField('Latitude', null=True)
  long_x                        = models.FloatField('Longitude', null=True)
  tract_fix                     = models.FloatField('2000 census tract', null=True)
  no_tract_info                 = models.NullBooleanField('No geography information', null=True)
  ca_num                        = models.IntegerField('Community area number', null=True)
  ca_name                       = models.CharField('Community area', max_length=100, null=True)
  place                         = models.CharField('Cook County subdivision', max_length=100, null=True)
  ward                          = models.IntegerField('Ward number, if available', null=True)
  chicago_flag                  = models.IntegerField('Within city limits?', null=True)
  gisdate                       = models.CharField('GIS file reference date', max_length=100, null=True)
  loc                           = models.PointField(null=True,srid=3435)
  objects                       = models.GeoManager()
  def __unicode__(self):
    return unicode(self.pin)
  class Meta:
    app_label = 'landbank_data'
